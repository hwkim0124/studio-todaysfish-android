package com.reelingsoft.todaysfish.fragment

import android.app.Activity
import android.app.AlertDialog
import android.app.Dialog
import android.content.Context
import android.content.DialogInterface
import android.content.res.Configuration
import android.graphics.*
import android.hardware.camera2.*
import android.media.ImageReader
import android.os.Bundle
import android.os.Handler
import android.os.HandlerThread
import android.support.v4.app.DialogFragment
import android.support.v4.app.Fragment
import android.text.TextUtils
import android.util.Size
import android.view.*
import android.widget.Toast
import com.reelingsoft.todaysfish.R
import com.reelingsoft.todaysfish.customview.AutoFitTextureView
import timber.log.Timber
import java.lang.NullPointerException
import java.lang.RuntimeException
import java.util.*
import java.util.concurrent.Semaphore
import java.util.concurrent.TimeUnit
import kotlin.math.sign


class CameraConnectionFragment: Fragment() {

    /** A {@link Semaphore} to prevent the app from exiting before closing the camera. */
    private val cameraOpenCloseLock = Semaphore(1)

    /** A {@link OnImageAvailableListener} to receive frames as they are available. */
    private lateinit var imageListener: ImageReader.OnImageAvailableListener

    /** The input size in pixels desired by TensorFlow (width and height of a square bitmap). */
    private lateinit var inputSize: Size

    /** The layout identifier to inflate for this Fragment. */
    private var layoutId = 0

    private lateinit var cameraConnectionCallback: ConnectionCallback
    private val captureCallback = object: CameraCaptureSession.CaptureCallback() {
        override fun onCaptureProgressed(
            session: CameraCaptureSession,
            request: CaptureRequest,
            partialResult: CaptureResult
        ) {
            // super.onCaptureProgressed(session, request, partialResult)
        }

        override fun onCaptureCompleted(
            session: CameraCaptureSession,
            request: CaptureRequest,
            result: TotalCaptureResult
        ) {
            // super.onCaptureCompleted(session, request, result)
        }
    }

    /** ID of the current {@link CameraDevice}. */
    private var cameraId = ""

    /** An {@link AutoFitTextureView} for camera preview. */
    private lateinit var textureView: AutoFitTextureView

    /** A {@link CameraCaptureSession } for camera preview. */
    private var captureSession: CameraCaptureSession? = null

    /** A reference to the opened {@link CameraDevice}. */
    private var cameraDevice: CameraDevice? = null

    /** The rotation in degrees of the camera sensor from the display. */
    private var sensorOrientation = 0

    /** The {@link Size} of camera preview. */
    private lateinit var previewSize: Size

    /** An additional thread for running tasks that shouldn't block the UI. */
    private var backgroundThread: HandlerThread? = null

    /** A {@link Handler} for running tasks in the background. */
    private var backgroundHandler: Handler? = null

    /** An {@link ImageReader} that handles preview frame capture. */
    private var previewReader: ImageReader? = null

    /** {@link CaptureRequest.Builder} for the camera preview */
    private lateinit var previewRequestBuilder: CaptureRequest.Builder

    /** {@link CaptureRequest} generated by {@link #previewRequestBuilder} */
    private lateinit var previewRequest: CaptureRequest

    /** {@link CameraDevice.StateCallback} is called when {@link CameraDevice} changes its state. */
    private val stateCallback = object: CameraDevice.StateCallback() {
        override fun onOpened(camera: CameraDevice) {
            // This method is called when the camera is opened.  We start camera preview here.
            cameraOpenCloseLock.release()
            cameraDevice = camera
            createCameraPreviewSession()
        }

        override fun onDisconnected(camera: CameraDevice) {
            cameraOpenCloseLock.release()
            camera.close()
            cameraDevice = null
        }

        override fun onError(camera: CameraDevice, error: Int) {
            cameraOpenCloseLock.release()
            camera.close()
            cameraDevice = null

            activity?.apply {
                this.finish()
            }
        }
    }


    /**
     * {@link TextureView.SurfaceTextureListener} handles several lifecycle events on a {@link
     * TextureView}.
     */
    private val surfaceTextureListener = object: TextureView.SurfaceTextureListener {
        override fun onSurfaceTextureAvailable(surface: SurfaceTexture?, width: Int, height: Int) {
            openCamera(width, height)
        }

        override fun onSurfaceTextureSizeChanged(surface: SurfaceTexture?, width: Int, height: Int) {
            configureTransform(width, height)
        }

        override fun onSurfaceTextureDestroyed(surface: SurfaceTexture?): Boolean {
            return true
        }

        override fun onSurfaceTextureUpdated(surface: SurfaceTexture?) {
        }
    }


    private fun setup(connectionCallback: ConnectionCallback,
                      imageListener: ImageReader.OnImageAvailableListener,
                      layoutId: Int, inputSize: Size) {
        this.cameraConnectionCallback = connectionCallback
        this.imageListener = imageListener
        this.layoutId = layoutId
        this.inputSize = inputSize
    }


    // runOnUiThread runs the specified action on the UI thread. If the current thread is the UI thread,
    // then the action is executed immediately. If the current thread is not the UI thread,
    // the action is posted to the event queue of the UI thread.
    private fun showToast(text: String) {
        activity?.apply {
            this.runOnUiThread {
                Toast.makeText(this, text, Toast.LENGTH_SHORT).show()
            }
        }
    }


    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        return inflater.inflate(layoutId, container, false)
    }


    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        textureView = view.findViewById(R.id.texture)
    }


    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)
    }


    override fun onResume() {
        super.onResume()
        startBackgroundThread()

        // When the screen is turned off and turned back on, the SurfaceTexture is already
        // available, and "onSurfaceTextureAvailable" will not be called. In that case, we can open
        // a camera and start preview from here (otherwise, we wait until the surface is ready in
        // the SurfaceTextureListener).
        if (textureView.isAvailable) {
            openCamera(textureView.width, textureView.height)
        } else {
            textureView.surfaceTextureListener = surfaceTextureListener
        }
    }


    override fun onPause() {
        closeCamera()
        stopBackgroundThread()
        super.onPause()
    }


    fun setCamera(cameraId: String) {
        this.cameraId = cameraId
    }


    /** Sets up member variables related to camera. */
    private fun setupCameraOutputs() {
        activity ?: return
        val manager = activity!!.getSystemService(Context.CAMERA_SERVICE) as CameraManager

        try {
            val characteristics = manager.getCameraCharacteristics(cameraId)
            val map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP) ?: return

            sensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION) ?: 0

            // Danger, W.R.! Attempting to use too large a preview size could  exceed the camera
            // bus' bandwidth limitation, resulting in gorgeous previews but the storage of
            // garbage capture data.
            previewSize = chooseOptimalSize(
                map.getOutputSizes(SurfaceTexture::class.java),
                inputSize.width, inputSize.height)

            // We fit the aspect ratio of TextureView to the size of preview we picked.
            val orientation = resources.configuration.orientation
            if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                textureView.setAspectRatio(previewSize.width, previewSize.height)
            } else {
                textureView.setAspectRatio(previewSize.height, previewSize.width)
            }
        } catch (e: CameraAccessException) {
            Timber.e("CameraAccessException occurred!")
        } catch (e: NullPointerException) {
            // Currently an NPE is thrown when the Camera2API is used but not supported on the
            // device this code runs.
            val text = "This device doesn't support Camera2 API."
            Timber.e(text)
            ErrorDialog.newInstance(text).show(childFragmentManager, "dialog")
            throw RuntimeException(text)
        }

        cameraConnectionCallback.onPreviewSizeChosen2(previewSize, sensorOrientation)
    }


    /** Opens the camera specified by {@link CameraConnectionFragment#cameraId}. */
    private fun openCamera(width: Int, height: Int) {
        setupCameraOutputs()
        configureTransform(width, height)

        activity ?: return
        val manager = activity!!.getSystemService(Context.CAMERA_SERVICE) as CameraManager

        try {
            if (!cameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {
                throw RuntimeException("Time out waiting to lock camera opening.")
            }
            manager.openCamera(cameraId, stateCallback, backgroundHandler)
        } catch (e: CameraAccessException) {
            Timber.e("CameraAccessException occurred!")
        } catch (e: SecurityException) {
            Timber.e("SecurityException occurred!")
        } catch (e: InterruptedException) {
            throw RuntimeException("Interrupted while trying to lock camera opening.")
        }
    }


    /** Closes the current {@link CameraDevice}. */
    private fun closeCamera() {
        try {
            cameraOpenCloseLock.acquire()
            if (null != captureSession) {
                captureSession?.close()
                captureSession = null
            }
            if (null != cameraDevice) {
                cameraDevice?.close()
                cameraDevice = null
            }
            if (null != previewReader) {
                previewReader?.close()
                previewReader = null
            }
        } catch (e: InterruptedException) {
            throw RuntimeException("Interrupted while trying to lock camera closing.")
        } finally {
            cameraOpenCloseLock.release()
        }
    }


    /** Starts a background thread and its {@link Handler}. */
    private fun startBackgroundThread() {
        backgroundThread = HandlerThread("ImageListener")
        backgroundThread?.apply {
            this.start()
            backgroundHandler = Handler(this.looper)
        }
    }


    /** Stops the background thread and its {@link Handler}. */
    private fun stopBackgroundThread() {
        backgroundThread?.quitSafely()
        try {
            backgroundThread?.join()
            backgroundThread = null
            backgroundHandler = null
        } catch (e: InterruptedException) {
            Timber.e("InterruptedException occurred!")
        }
    }


    /** Creates a new {@link CameraCaptureSession} for camera preview. */
    private fun createCameraPreviewSession() {

        try {
            val texture = textureView.surfaceTexture
            texture ?: return

            // We configure the size of default buffer to be the size of camera preview we want.
            texture.setDefaultBufferSize(previewSize.width, previewSize.height)

            // This is the output Surface we need to start preview.
            val surface = Surface(texture)

            // We set up a CaptureRequest.Builder with the output Surface.
            val previewRequestBuilder = cameraDevice?.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW)
            previewRequestBuilder ?: return
            previewRequestBuilder.addTarget(surface)

            Timber.i("Opening camera preview: ${previewSize.width} + x + ${previewSize.height}")

            // Create the reader for the preview frames.
            val previewReader = ImageReader.newInstance(
                previewSize.width, previewSize.height, ImageFormat.YUV_420_888, 2
            )

            previewReader.setOnImageAvailableListener(imageListener, backgroundHandler)
            previewRequestBuilder.addTarget(previewReader.surface)

            this.previewRequestBuilder = previewRequestBuilder

            // Here, we create a CameraCaptureSession for camera preview.
            cameraDevice?.createCaptureSession(
                arrayListOf(surface, previewReader.surface),
                object : CameraCaptureSession.StateCallback() {
                    override fun onConfigured(session: CameraCaptureSession) {
                        // The camera is already closed
                        cameraDevice ?: return

                        // When the session is ready, we start displaying the preview.
                        captureSession = session
                        try {
                            // Auto focus should be continuous for camera preview.
                            previewRequestBuilder.set(
                                CaptureRequest.CONTROL_AF_MODE,
                                CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE
                            )
                            // Flash is automatically enabled when necessary.
                            previewRequestBuilder.set(
                                CaptureRequest.CONTROL_AE_MODE,
                                CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH
                            )

                            // Finally, we start displaying the camera preview.
                            previewRequest = previewRequestBuilder.build()
                            captureSession?.setRepeatingRequest(
                                previewRequest, captureCallback, backgroundHandler
                            )

                        } catch (e: CameraAccessException) {
                            Timber.e("CameraAccessException occurred!")
                        }
                    }

                    override fun onConfigureFailed(session: CameraCaptureSession) {
                        showToast("Capture session configure failed!")
                    }
                },
                null
            )
        }
        catch (e: CameraAccessException) {
            Timber.e("CameraAccessException occurred!")
        }
    }


    /**
     * Configures the necessary {@link Matrix} transformation to `mTextureView`. This method should be
     * called after the camera preview size is determined in setUpCameraOutputs and also the size of
     * `mTextureView` is fixed.
     *
     * @param viewWidth The width of `mTextureView`
     * @param viewHeight The height of `mTextureView`
     */
    private fun configureTransform(viewWidth: Int, viewHeight: Int) {
        if (activity == null) {
            return
        }

        val rotation = activity!!.windowManager.defaultDisplay.rotation
        val matrix = Matrix()
        val viewRect = RectF(0.0f, 0.0f, viewWidth.toFloat(), viewHeight.toFloat())
        val buffRect = RectF(0.0f, 0.0f, previewSize.height.toFloat(), previewSize.width.toFloat())
        val centerX = viewRect.centerX()
        val centerY = viewRect.centerY()

        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
            buffRect.offset(centerX - buffRect.centerX(), centerY - buffRect.centerY())
            matrix.setRectToRect(viewRect, buffRect, Matrix.ScaleToFit.FILL)
            val scale = Math.max(
                viewHeight.toFloat() / previewSize.height,
                viewWidth.toFloat() / previewSize.width
            )
            matrix.postScale(scale, scale, centerX, centerY)
            matrix.postRotate(90.0f * (rotation-2), centerX, centerY)
        }
        else if (Surface.ROTATION_180 == rotation) {
            matrix.postRotate(180.0f, centerX, centerY)
        }
        textureView.setTransform(matrix)

        cameraConnectionCallback.onSurfaceSizeChanged(Size(viewWidth, viewHeight))
    }


    companion object {

        /**
         * The camera preview size will be chosen to be the smallest frame by pixel size capable of
         * containing a DESIRED_SIZE x DESIRED_SIZE square.
         */
        private const val MINIMUM_PREVIEW_SIZE = 320

        fun newInstance(connectionCallback: ConnectionCallback,
                        imageListener: ImageReader.OnImageAvailableListener,
                        layoutId: Int, inputSize: Size
        ): CameraConnectionFragment {
            val fragment = CameraConnectionFragment()
            fragment.setup(connectionCallback, imageListener, layoutId, inputSize)
            return fragment
        }

        /**
         * Given {@code choices} of {@code Size}s supported by a camera, chooses the smallest one whose
         * width and height are at least as large as the minimum of both, or an exact match if possible.
         *
         * @param choices The list of sizes that the camera supports for the intended output class
         * @param width The minimum desired width
         * @param height The minimum desired height
         * @return The optimal {@code Size}, or an arbitrary one if none were big enough
         */
        fun chooseOptimalSize(choices: Array<Size>, width: Int, height: Int): Size {
            val minSize = Math.max(Math.min(width, height), MINIMUM_PREVIEW_SIZE)
            val desiredSize = Size(width, height)

            var exactSizeFound = false
            val bigEnough = ArrayList<Size>()
            val tooSmall = ArrayList<Size>()

            for (size in choices) {
                if (size == desiredSize) {
                    exactSizeFound = true
                }

                if (size.height >= minSize && size.width >= minSize) {
                    bigEnough.add(size)
                }
                else {
                    tooSmall.add(size)
                }
            }

            Timber.i("Desired size: $desiredSize, min size: $minSize x $minSize")
            Timber.i("Valid preview sizes: [${TextUtils.join(", ", bigEnough)}]")
            Timber.i("Rejected preview sizes: [${TextUtils.join(", ", tooSmall)}]")

            if (exactSizeFound) {
                Timber.i("Exact size match found.")
                return desiredSize
            }

            // Pick the smallest of those, assuming we found any
            if (bigEnough.size > 0) {
                val chosenSize = Collections.min(bigEnough, CompareSizesByArea())
                Timber.i("Chosen size: ${chosenSize.width} x ${chosenSize.height}")
                return chosenSize
            } else {
                Timber.e("Couldn't find any suitable preview size")
                return choices[0]
            }
        }
    }

    /** Compares two {@code Size}s based on their areas. */
    class CompareSizesByArea: Comparator<Size> {
        override fun compare(o1: Size?, o2: Size?): Int {
            // We cast here to ensure the multiplications won't overflow
            if (o1 != null && o2 != null) {
                val diff = o1.width * o1.height - o2.width * o2.height
                return diff.sign
            }
            return 0
        }
    }


    /**
     * Callback for Activities to use to initialize their data once the selected preview size is
     * known.
     */
    interface ConnectionCallback {
        fun onPreviewSizeChosen2(size: Size, cameraRotation: Int)
        fun onSurfaceSizeChanged(size: Size)
    }


    class ErrorDialog: DialogFragment() {
        override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
            return AlertDialog.Builder(activity!!)
                .setMessage(arguments!!.getString(ARG_MESSAGE))
                .setPositiveButton(
                    android.R.string.ok,
                    object: DialogInterface.OnClickListener {
                        override fun onClick(dialog: DialogInterface?, which: Int) {
                            activity!!.finish()
                        }
                    }
                )
                .create()
        }

        companion object {
            const val ARG_MESSAGE = "message"

            fun newInstance(message: String): ErrorDialog {
                val dialog = ErrorDialog()
                val args = Bundle()
                args.putString(ARG_MESSAGE, message)
                dialog.arguments = args
                return dialog
            }
        }
    }
}